import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import random
import json
import os

bot = telebot.TeleBot("7575355245:AAFYVI4nLAycyZ3tuTQk2Ib2g3Pme3eBdb8")  # ‚Üê –º“±–Ω–¥–∞ ”©–∑ —Ç–æ–∫–µ–Ω—ñ“£–¥—ñ “õ–æ–π

# üìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª—ã
stats_file = 'users.json'
if not os.path.exists(stats_file):
    with open(stats_file, 'w') as f:
        json.dump({}, f)

def load_stats():
    with open(stats_file, 'r') as f:
        return json.load(f)

def save_stats(data):
    with open(stats_file, 'w') as f:
        json.dump(data, f)

def get_user(user_id):
    stats = load_stats()
    if str(user_id) not in stats:
        stats[str(user_id)] = {
            'clicks': 0,
            'multiplier': 1,
            'balance': 0,
            'rps_win': 0,
            'rps_lose': 0,
            'xo_win': 0,
            'xo_lose': 0,
            'battleship_hit': 0,
            'battleship_miss': 0,
            'xo_field': [' '] * 9,
            'xo_turn': 'X',
            'battleship_ship': [random.randint(0, 4), random.randint(0, 4)],
            'battleship_board': [['~'] * 5 for _ in range(5)],
        }
        save_stats(stats)
    return stats[str(user_id)]

def update_user(user_id, data):
    stats = load_stats()
    stats[str(user_id)].update(data)
    save_stats(stats)

# üéÆ –ë–∞—Å –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.row('üéÆ –ö–ª–∏–∫–µ—Ä', 'ü™® –°—É-–µ-—Ñ–∞')
main_menu.row('‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏', 'üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π')
main_menu.row('üõí –ú–∞–≥–∞–∑–∏–Ω', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üîÅ –†–µ—Å–µ—Ç')

@bot.message_handler(commands=['start'])
def start(message):
    get_user(message.from_user.id)
    bot.send_message(message.chat.id, "“ö–æ—à –∫–µ–ª–¥—ñ“£! –¢–∞“£–¥–∞:", reply_markup=main_menu)

# üîÅ –†–µ—Å–µ—Ç
@bot.message_handler(func=lambda m: m.text == 'üîÅ –†–µ—Å–µ—Ç')
def reset(message):
    stats = load_stats()
    stats.pop(str(message.from_user.id), None)
    save_stats(stats)
    bot.send_message(message.chat.id, "‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å ”©—à—ñ—Ä—ñ–ª–¥—ñ. /start “õ–∞–π—Ç–∞ –±–∞—Å")

# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(func=lambda m: m.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def show_stats(message):
    data = get_user(message.from_user.id)
    reply = (
        f"üñ± –ö–ª–∏–∫: {data['clicks']} (+{data['multiplier']})\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {data['balance']}\n"
        f"ü™® –°—É-–µ-—Ñ–∞: ‚úÖ {data['rps_win']} | ‚ùå {data['rps_lose']}\n"
        f"‚ùå XO: ‚úÖ {data['xo_win']} | ‚ùå {data['xo_lose']}\n"
        f"üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π: üéØ {data['battleship_hit']} | üí¶ {data['battleship_miss']}"
    )
    bot.send_message(message.chat.id, reply)

# üéÆ –ö–ª–∏–∫–µ—Ä
@bot.message_handler(func=lambda m: m.text == 'üéÆ –ö–ª–∏–∫–µ—Ä')
def clicker(message):
    user = get_user(message.from_user.id)
    user['clicks'] += user['multiplier']
    user['balance'] += user['multiplier']
    update_user(message.from_user.id, user)
    bot.send_message(message.chat.id, f"+{user['multiplier']} –∫–ª–∏–∫!\n–ñ–∞–ª–ø—ã: {user['clicks']}")

# üõí –ú–∞–≥–∞–∑–∏–Ω
@bot.message_handler(func=lambda m: m.text == 'üõí –ú–∞–≥–∞–∑–∏–Ω')
def shop(message):
    user = get_user(message.from_user.id)
    cost = user['multiplier'] * 10
    if user['balance'] >= cost:
        user['balance'] -= cost
        user['multiplier'] += 1
        update_user(message.from_user.id, user)
        bot.send_message(message.chat.id, f"üîº –ö“Ø—à–µ–π—Ç–∫—ñ—à +1! –ï–Ω–¥—ñ: +{user['multiplier']}")
    else:
        bot.send_message(message.chat.id, f"‚ùå –ñ–µ—Ç–∫—ñ–ª—ñ–∫—Å—ñ–∑ –∞“õ—à–∞. “ö“±–Ω—ã: {cost}üí∞")

# ü™® –°—É-–µ-—Ñ–∞
@bot.message_handler(func=lambda m: m.text == 'ü™® –°—É-–µ-—Ñ–∞')
def rps_game(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ö–∞–º–µ–Ω—å', '–ù–æ–∂–Ω–∏—Ü—ã', '–ë—É–º–∞–≥–∞')
    markup.row('üîô –ê—Ä—Ç“õ–∞')
    bot.send_message(message.chat.id, "–¢–∞“£–¥–∞:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ['–ö–∞–º–µ–Ω—å', '–ù–æ–∂–Ω–∏—Ü—ã', '–ë—É–º–∞–≥–∞'])
def rps_choice(message):
    user = get_user(message.from_user.id)
    user_choice = message.text
    bot_choice = random.choice(['–ö–∞–º–µ–Ω—å', '–ù–æ–∂–Ω–∏—Ü—ã', '–ë—É–º–∞–≥–∞'])

    win = {
        '–ö–∞–º–µ–Ω—å': '–ù–æ–∂–Ω–∏—Ü—ã',
        '–ù–æ–∂–Ω–∏—Ü—ã': '–ë—É–º–∞–≥–∞',
        '–ë—É–º–∞–≥–∞': '–ö–∞–º–µ–Ω—å'
    }

    if user_choice == bot_choice:
        result = "ü§ù –¢–µ“£"
    elif win[user_choice] == bot_choice:
        result = "‚úÖ –ñ–µ“£–¥—ñ“£!"
        user['rps_win'] += 1
    else:
        result = "‚ùå “∞—Ç—ã–ª–¥—ã“£!"
        user['rps_lose'] += 1

    update_user(message.from_user.id, user)
    bot.send_message(message.chat.id, f"–°–µ–Ω: {user_choice}\n–ë–æ—Ç: {bot_choice}\n{result}")

# ‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
@bot.message_handler(func=lambda m: m.text == '‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏')
def xo_start(message):
    user = get_user(message.from_user.id)
    user['xo_field'] = [' '] * 9
    update_user(message.from_user.id, user)
    xo_draw(message)

def xo_draw(message):
    user = get_user(message.from_user.id)
    buttons = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for i in range(9):
        text = user['xo_field'][i] if user['xo_field'][i] != ' ' else str(i+1)
        buttons.insert(KeyboardButton(text))
    buttons.add(KeyboardButton('üîô –ê—Ä—Ç“õ–∞'))
    bot.send_message(message.chat.id, "–ö–ª–µ—Ç–∫–∞ —Ç–∞“£–¥–∞ (1‚Äì9):", reply_markup=buttons)

def xo_check_win(board, char):
    wins = [(0,1,2), (3,4,5), (6,7,8), (0,3,6), (1,4,7), (2,5,8), (0,4,8), (2,4,6)]
    return any(all(board[i] == char for i in line) for line in wins)

@bot.message_handler(func=lambda m: m.text in [str(i) for i in range(1, 10)])
def xo_play(message):
    pos = int(message.text) - 1
    user = get_user(message.from_user.id)

    if user['xo_field'][pos] != ' ':
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ë“±–ª –æ—Ä—ã–Ω –±–æ—Å –µ–º–µ—Å!")
        return

    user['xo_field'][pos] = 'X'
    if xo_check_win(user['xo_field'], 'X'):
        user['xo_win'] += 1
        update_user(message.from_user.id, user)
        bot.send_message(message.chat.id, "‚úÖ –ñ–µ“£–¥—ñ“£! /‚ùå “õ–∞–π—Ç–∞ –æ–π–Ω–∞")
        return

    empty = [i for i, v in enumerate(user['xo_field']) if v == ' ']
    if not empty:
        bot.send_message(message.chat.id, "ü§ù –¢–µ“£!")
        return

    bot_move = random.choice(empty)
    user['xo_field'][bot_move] = 'O'
    if xo_check_win(user['xo_field'], 'O'):
        user['xo_lose'] += 1
        update_user(message.from_user.id, user)
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç –∂–µ“£–¥—ñ! /‚ùå “õ–∞–π—Ç–∞")
        return

    update_user(message.from_user.id, user)
    xo_draw(message)

# –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
bot.polling(non_stop=True)